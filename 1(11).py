import psycopg2
import csv
from tabulate import tabulate

conn = psycopg2.connect(host="localhost", dbname="postgres", user="postgres",
                        password="postgres", port=5432)
cur = conn.cursor()

# ---------- –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ ----------
cur.execute("""
    CREATE TABLE IF NOT EXISTS phonebook (
        id SERIAL PRIMARY KEY,
        first_name TEXT,
        last_name TEXT,
        phone TEXT,
        email TEXT
    );
""")
conn.commit()

# ---------- –§–£–ù–ö–¶–ò–ò ----------
def insert_from_input():
    first_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ")
    last_name = input("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: ")
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
    email = input("–í–≤–µ–¥–∏—Ç–µ email: ")
    cur.execute("""
        INSERT INTO phonebook (first_name, last_name, phone, email)
        VALUES (%s, %s, %s, %s)
    """, (first_name, last_name, phone, email))
    conn.commit()
    print("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞")

def insert_from_csv():
    path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É: ")
    with open(path, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            cur.execute("""
                INSERT INTO phonebook (first_name, last_name, phone, email)
                VALUES (%s, %s, %s, %s)
            """, (row['first_name'], row['last_name'], row['phone'], row['email']))
    conn.commit()
    print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ CSV –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def update_user():
    id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å: ")
    print("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å: 1 - –ò–º—è, 2 - –§–∞–º–∏–ª–∏—è, 3 - –¢–µ–ª–µ—Ñ–æ–Ω, 4 - Email")
    choice = input("–í—ã–±–æ—Ä: ")
    field_map = {'1': 'first_name', '2': 'last_name', '3': 'phone', '4': 'email'}
    if choice in field_map:
        new_value = input(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_map[choice]}: ")
        cur.execute(f"UPDATE phonebook SET {field_map[choice]} = %s WHERE id = %s", (new_value, id))
        conn.commit()
        print("‚úèÔ∏è –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def search():
    pattern = input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏, —Ñ–∞–º–∏–ª–∏–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ")
    query = """
        SELECT * FROM phonebook
        WHERE first_name ILIKE %s OR last_name ILIKE %s OR phone ILIKE %s
    """
    cur.execute(query, (f"%{pattern}%", f"%{pattern}%", f"%{pattern}%"))
    rows = cur.fetchall()
    print(tabulate(rows, headers=["ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"], tablefmt="fancy_grid"))

def delete():
    id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
    cur.execute("DELETE FROM phonebook WHERE id = %s", (id,))
    conn.commit()
    print("‚ùå –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")

def pagination():
    limit = int(input("–°–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å: "))
    offset = int(input("–° –∫–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–∞—á–∞—Ç—å: "))
    cur.execute("SELECT * FROM phonebook ORDER BY id LIMIT %s OFFSET %s", (limit, offset))
    rows = cur.fetchall()
    print(tabulate(rows, headers=["ID", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", "–¢–µ–ª–µ—Ñ–æ–Ω", "Email"], tablefmt="fancy_grid"))

# ---------- –ú–ï–ù–Æ ----------
def menu():
    while True:
        print("""
üì± PhoneBook Menu:
1. –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ CSV
3. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
4. –ü–æ–∏—Å–∫
5. –ü–∞–≥–∏–Ω–∞—Ü–∏—è
6. –£–¥–∞–ª–∏—Ç—å
0. –í—ã–π—Ç–∏
""")
        choice = input("–í—ã–±–æ—Ä: ")
        if choice == '1':
            insert_from_input()
        elif choice == '2':
            insert_from_csv()
        elif choice == '3':
            update_user()
        elif choice == '4':
            search()
        elif choice == '5':
            pagination()
        elif choice == '6':
            delete()
        elif choice == '0':
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!")

menu()

cur.close()
conn.close()
print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")